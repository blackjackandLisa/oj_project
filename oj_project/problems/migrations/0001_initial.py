# Generated by Django 4.2.7 on 2025-10-02 08:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Problem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="题目标题")),
                ("description", models.TextField(verbose_name="题目描述")),
                ("input_format", models.TextField(verbose_name="输入格式")),
                ("output_format", models.TextField(verbose_name="输出格式")),
                ("sample_input", models.TextField(verbose_name="样例输入")),
                ("sample_output", models.TextField(verbose_name="样例输出")),
                ("hint", models.TextField(blank=True, verbose_name="提示")),
                (
                    "source",
                    models.CharField(blank=True, max_length=200, verbose_name="来源"),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[("Easy", "简单"), ("Medium", "中等"), ("Hard", "困难")],
                        default="Easy",
                        max_length=20,
                        verbose_name="难度",
                    ),
                ),
                (
                    "time_limit",
                    models.IntegerField(
                        default=1000,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name="时间限制(ms)",
                    ),
                ),
                (
                    "memory_limit",
                    models.IntegerField(
                        default=262144,
                        validators=[
                            django.core.validators.MinValueValidator(32768),
                            django.core.validators.MaxValueValidator(1048576),
                        ],
                        verbose_name="内存限制(KB)",
                    ),
                ),
                ("is_public", models.BooleanField(default=True, verbose_name="是否公开")),
                ("total_submit", models.IntegerField(default=0, verbose_name="总提交数")),
                ("total_accepted", models.IntegerField(default=0, verbose_name="总通过数")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_problems",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "题目",
                "verbose_name_plural": "题目",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, unique=True, verbose_name="标签名称"),
                ),
                (
                    "color",
                    models.CharField(
                        default="secondary", max_length=20, verbose_name="颜色"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
            ],
            options={
                "verbose_name": "标签",
                "verbose_name_plural": "标签",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TestCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_data", models.TextField(verbose_name="输入数据")),
                ("output_data", models.TextField(verbose_name="期望输出")),
                (
                    "is_sample",
                    models.BooleanField(
                        default=False, help_text="样例对用户可见", verbose_name="是否为样例"
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        default=10, help_text="用于部分分题目", verbose_name="分值"
                    ),
                ),
                ("order", models.IntegerField(default=0, verbose_name="排序")),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_cases",
                        to="problems.problem",
                        verbose_name="所属题目",
                    ),
                ),
            ],
            options={
                "verbose_name": "测试用例",
                "verbose_name_plural": "测试用例",
                "ordering": ["order", "id"],
            },
        ),
        migrations.AddField(
            model_name="problem",
            name="tags",
            field=models.ManyToManyField(
                blank=True, to="problems.tag", verbose_name="标签"
            ),
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.TextField(verbose_name="代码")),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("C", "C"),
                            ("C++", "C++"),
                            ("Python", "Python"),
                            ("Java", "Java"),
                            ("JavaScript", "JavaScript"),
                        ],
                        max_length=20,
                        verbose_name="编程语言",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "等待评测"),
                            ("Judging", "评测中"),
                            ("Accepted", "通过"),
                            ("Wrong Answer", "答案错误"),
                            ("Time Limit Exceeded", "超时"),
                            ("Memory Limit Exceeded", "内存超限"),
                            ("Runtime Error", "运行错误"),
                            ("Compile Error", "编译错误"),
                            ("System Error", "系统错误"),
                        ],
                        default="Pending",
                        max_length=30,
                        verbose_name="状态",
                    ),
                ),
                ("score", models.IntegerField(default=0, verbose_name="得分")),
                (
                    "time_used",
                    models.IntegerField(blank=True, null=True, verbose_name="运行时间(ms)"),
                ),
                (
                    "memory_used",
                    models.IntegerField(blank=True, null=True, verbose_name="内存使用(KB)"),
                ),
                ("error_info", models.TextField(blank=True, verbose_name="错误信息")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="提交时间"),
                ),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="problems.problem",
                        verbose_name="题目",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "提交记录",
                "verbose_name_plural": "提交记录",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user"], name="problems_su_user_id_112ba8_idx"
                    ),
                    models.Index(
                        fields=["problem"], name="problems_su_problem_baade8_idx"
                    ),
                    models.Index(
                        fields=["status"], name="problems_su_status_2e2033_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="problems_su_created_ea8540_idx"
                    ),
                    models.Index(
                        fields=["user", "problem"],
                        name="problems_su_user_id_3f957f_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="problem",
            index=models.Index(
                fields=["difficulty"], name="problems_pr_difficu_d3b056_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="problem",
            index=models.Index(
                fields=["is_public"], name="problems_pr_is_publ_b35f8d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="problem",
            index=models.Index(
                fields=["created_at"], name="problems_pr_created_b0f0ea_idx"
            ),
        ),
    ]
