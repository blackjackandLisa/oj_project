version: '3.8'

services:
  # Nginx反向代理和静态文件服务器
  nginx:
    image: nginx:alpine
    container_name: oj_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - oj_network

  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: oj_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oj_database}
      POSTGRES_USER: ${POSTGRES_USER:-oj_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-oj_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - oj_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-oj_user} -d ${POSTGRES_DB:-oj_database}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: oj_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - oj_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Web应用
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: oj_web
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn oj_project.wsgi:application 
             --bind 0.0.0.0:8000 
             --workers 4 
             --threads 2 
             --worker-class gthread 
             --max-requests 1000 
             --max-requests-jitter 100 
             --timeout 30 
             --keep-alive 2 
             --access-logfile - 
             --error-logfile -"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-oj_user}:${POSTGRES_PASSWORD:-oj_password_2024}@db:5432/${POSTGRES_DB:-oj_database}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - oj_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/judge/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (判题任务)
  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: oj_celery
    command: >
      celery -A oj_project worker 
      --loglevel=info 
      --concurrency=16 
      --prefetch-multiplier=1 
      --max-tasks-per-child=1000
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-oj_user}:${POSTGRES_PASSWORD:-oj_password_2024}@db:5432/${POSTGRES_DB:-oj_database}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - oj_network

  # Celery Beat (定时任务)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: oj_celery_beat
    command: celery -A oj_project beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-oj_user}:${POSTGRES_PASSWORD:-oj_password_2024}@db:5432/${POSTGRES_DB:-oj_database}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - oj_network

  # Flower (Celery监控)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: oj_flower
    command: celery -A oj_project flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-oj_user}:${POSTGRES_PASSWORD:-oj_password_2024}@db:5432/${POSTGRES_DB:-oj_database}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379/0
    depends_on:
      - celery
    restart: unless-stopped
    networks:
      - oj_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  oj_network:
    driver: bridge
